generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // referentialIntegrity = "prisma"
  relationMode = "prisma"
}

model Link {
  uid    String @id @default(cuid())
  alias  String
  href   String
  userId String

  Folder    Folder? @relation(fields: [folder_id], references: [uid])
  folder_id String?
  User      User?   @relation(fields: [userId], references: [id])

  @@index([folder_id])
  @@index([userId])
}

model Folder {
  uid    String @id @default(cuid())
  links  Link[]
  userId String

  nestedFolders   Folder[] @relation("Nested_Folders")
  parentFolder    Folder?  @relation("Nested_Folders", fields: [parentFolder_id], references: [uid], onDelete: NoAction, onUpdate: NoAction)
  parentFolder_id String?

  User User? @relation(fields: [userId], references: [id])

  @@index([parentFolder_id])
  @@index([userId])
}

model Todo {
  uid        String   @id @default(cuid())
  created_at DateTime
  text       String
  done       Boolean
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  links   Link[]
  folders Folder[]

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
